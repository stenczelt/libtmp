name: Build Libtorch Shared Library

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}

    # non-parametrized settings
    env:
      build_type: Release
      build_dir: build
      install_dir: build
      c_compiler: gcc
      cpp_compiler: g++
      ftn_compiler: gfortran

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04, macos-14 ]
        libtorch_cuda: [ cpu ] # Default for macOS
        libtorch_version: [ "2.6.0", "2.4.1" ]
        include:
          # Libtorch 2.6.0
          - os: ubuntu-22.04
            libtorch_cuda: cu118
            cuda_version: "11.8.0"
            libtorch_version: "2.6.0"
          - os: ubuntu-22.04
            libtorch_cuda: cu124
            cuda_version: "12.4.0"
            libtorch_version: "2.6.0"
          - os: ubuntu-22.04
            libtorch_cuda: cu126
            cuda_version: "12.6.0"
            libtorch_version: "2.6.0"

          # Libtorch 2.4.1
          - os: ubuntu-22.04
            libtorch_cuda: cu118
            cuda_version: "11.8.0"
            libtorch_version: "2.4.1"
          - os: ubuntu-22.04
            libtorch_cuda: cu121
            cuda_version: "12.1.0"
            libtorch_version: "2.4.1"
          - os: ubuntu-22.04
            libtorch_cuda: cu124
            cuda_version: "12.4.0"
            libtorch_version: "2.4.1"

          # MacOS arm64 (only CPU)
          - os: macos-14
            libtorch_cuda: cpu
            libtorch_version: "2.6.0"
          - os: macos-14
            libtorch_cuda: cpu
            libtorch_version: "2.4.1"

    #        exclude:
    #          - os: macos-14
    #            arch: x86_64 # No MacOS x86_64 builds

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up build environment
        run: |
          echo "LIBTORCH_VERSION=${{ matrix.libtorch_version }}" >> $GITHUB_ENV

      - name: Construct filename
        run: |
          # platofrm
          if [[ "${{ matrix.os }}" == macos* ]]; then
            PLATFORM="macos-arm64"
          else
            PLATFORM="x86_64"
          fi
          
          # modifier: for the end of the filename, note includes `-` at the start
          if [[ "${{ matrix.libtorch_cuda }}" == "cpu" ]]; then
            MODIFIER=""
          else
            MODIFIER="-${{ matrix.libtorch_cuda }}"
          fi
          
          # version: this should come from the package
          VERSION=25.2.1
          
          FILENAME="libmace-${PLATFORM}-${VERSION}-libtorch${{ matrix.libtorch_version }}${MODIFIER}.tar.gz"
          echo "TAR_FILENAME=$FILENAME" >> $GITHUB_ENV
          echo "Generated filename: $FILENAME"

      - name: Download libtorch
        id: libtorch
        run: |
          if [[ "${{ matrix.os }}" == ubuntu* ]]; then
            LIBTORCH_URL="https://download.pytorch.org/libtorch/${{ matrix.libtorch_cuda }}/libtorch-cxx11-abi-shared-with-deps-${{ matrix.libtorch_version }}%2B${{ matrix.libtorch_cuda }}.zip"
          elif [[ "${{ matrix.os }}" == macos* ]]; then
            LIBTORCH_URL="https://download.pytorch.org/libtorch/cpu/libtorch-macos-arm64-${{ matrix.libtorch_version }}.zip"
          fi

          echo "Downloading libtorch from $LIBTORCH_URL"
          wget -O libtorch.zip "$LIBTORCH_URL"
          unzip libtorch.zip
          
          # save path for later steps
          echo "path=$(realpath libtorch)" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: >
          cmake -B ${{ env.build_dir }}
          -DCMAKE_CXX_COMPILER=${{ env.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ env.c_compiler }}
          -DCMAKE_FORTRAN_COMPILER=${{ env.ftn_compiler }}
          -DCMAKE_BUILD_TYPE=${{ env.build_type }}
          -DCMAKE_PREFIX_PATH=${{ steps.libtorch.outputs.path }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ env.build_dir }} --config ${{ env.build_type }}

      - name: Install
        run: cmake --install ${{ env.build_dir }} --prefix ${{ env.install_dir }} --strip

      - name: Pack
        working-directory: ${{ env.install_dir }}
        run: cmake -E tar cvzf ../${{ env.TAR_FILENAME }} .


      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ./${{ env.TAR_FILENAME }}
          name: ${{ env.TAR_FILENAME }}
